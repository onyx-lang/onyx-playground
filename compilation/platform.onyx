package runtime.platform

Supports_Files :: true
Supports_Directories :: true
Supports_Os :: true
Supports_Processes :: false
Supports_Networking :: false
Supports_Env_Vars :: false
Supports_TTY :: false



use core {os, io}

// Files
FileData :: u32

__file_open :: (path: str, mode: os.OpenMode) -> (FileData, os.FileError) {
    fd: FileData;
    success := __file_open_impl(path, mode, &fd);
    if !success {
        return 0, .NotFound;
    }

    return fd, .None;
}

__file_close :: (fd: FileData) -> os.FileError {
    if __file_close_impl(fd) {
        return .None;
    } else {
        return .BadFile;
    }
}

__file_flush :: (handle: FileData) => io.Error.None

__file_stream_vtable := io.Stream_Vtable.{
    seek = (use fs: &os.File, to: i32, whence: io.SeekFrom) -> io.Error {
        now := __file_seek(data, to, whence);
        return (.None) if now >= 0 else .BadFile;
    },

    tell = (use fs: &os.File) -> (io.Error, u32) {
        return .None, __file_tell(data);
    },

    read = (use fs: &os.File, buffer: [] u8) -> (io.Error, u32) {
        bytes_read: u64;
        error := __file_read(data, buffer, &bytes_read);
        return error, ~~bytes_read;
    },

    read_at = (use fs: &os.File, at: u32, buffer: [] u8) -> (io.Error, u32) {
        __file_seek(data, at, .Start);
        bytes_read: u64;
        error := __file_read(data, buffer, &bytes_read);
        return error, ~~bytes_read;
    },

    read_byte = (use fs: &os.File) -> (io.Error, u8) {
        byte: u8;
        error := __file_read(data, ~~ cast([1] u8) &byte, null);
        return error, byte;
    },

    write = (use fs: &os.File, buffer: [] u8) -> (io.Error, u32) {
        bytes_wrote: u64;
        error := __file_write(data, buffer, &bytes_wrote);
        return error, ~~bytes_wrote;
    },

    write_at = (use fs: &os.File, at: u32, buffer: [] u8) -> (io.Error, u32) {
        __file_seek(data, at, .Start);
        bytes_wrote: u64;
        error := __file_write(data, buffer, &bytes_wrote);
        return error, ~~bytes_wrote;
    },

    write_byte = (use fs: &os.File, byte: u8) -> io.Error {
        b := byte;
        bytes_wrote: u64;
        error := __file_write(data, .{ &b, 1 }, &bytes_wrote);
        return error;
    },

    close = (use fs: &os.File) -> io.Error {
        __file_close(data);
        return .None;
    },

    flush = (use fs: &os.File) -> io.Error {
        return __file_flush(data);
    },

    size = (use fs: &os.File) -> i32 {
        return __file_size(data);
    },

    poll = (use fs: &os.File, ev: io.PollEvent, timeout: i32) -> (io.Error, bool) {
        return .NotFound, false;
    }
}

#foreign "host_fs" {
    __file_open_impl  :: (path: str, mode: os.OpenMode, out: &FileData) -> bool ---
    __file_close_impl :: (fd: FileData) -> bool ---

    __file_rename :: (old_path, new_path: str) -> bool ---
    __file_remove :: (path: str) -> bool ---
    __file_exists :: (path: str) -> bool ---
    __file_stat   :: (path: str, stat: &os.FileStat) -> bool ---

    __file_seek  :: (handle: FileData, to: i32, whence: io.SeekFrom) -> i32 ---
    __file_tell  :: (handle: FileData) -> u32 ---
    __file_read  :: (handle: FileData, output_buffer: [] u8, bytes_read: &u64) -> io.Error ---
    __file_write :: (handle: FileData, input_buffer: [] u8, bytes_wrote: &u64) -> io.Error ---
    __file_size  :: (handle: FileData) -> u32 ---
}



// Directories

DirectoryData :: u32

#foreign "host_fs" {
    __dir_open :: (path: str, dir: ^DirectoryData) -> bool ---
    __dir_close :: (dir: DirectoryData) -> void ---
    __dir_read :: (dir: DirectoryData, out_entry: ^os.DirectoryEntry) -> bool ---
    __dir_create :: (path: str) -> bool ---
    __dir_remove :: (path: str) -> bool ---
}


__chdir  :: (path: str) => false
__getcwd :: () => ""


// OS

__sleep :: (ms: i32) {

}
