#load "../lib/packages"

use core {*}
use nimbus {*}
use otmp

ENDPOINT :: ""
ONYX_SOURCE_FOLDER :: "/home/brendan/dev/onyx"

template_registry: otmp.TemplateRegistry

@route.{.GET, "/"}
index :: (c: Context) {
    c->set_header("Content-Type", "text/html")
    c->write_headers(200)

    template_registry->render_template("index", c->writer(), &.{
        endpoint = ENDPOINT,
    })
}

@route.{.GET, "/list_examples"}
list_examples :: (c: Context) {
    use core.encoding.json

    example_folder := os.path_join(ONYX_SOURCE_FOLDER, "worksheets")
    names := Iterator.comp(os.list_directory(example_folder), [](str.temp_copy(it->name())))
    names->sort(str.compare)
    for& names do it.count -= 5

    c->json(200, names)
}

@route.{.GET, "/example"}
load_example :: (c: Context) {
    example_name := c->query("example")
    if !example_name do return

    example_file_path := tprintf("{}/worksheets/{}.onyx", ONYX_SOURCE_FOLDER, example_name)

    if os.is_file(example_file_path) {
        contents := os.get_contents(example_file_path)
        c->blob(200, "text/plain", contents)
    } else {
        c->no_content(404)
    }
}

#local
run_compile_command :: (target: str, source_files: [] str, working_dir: str) -> Result(void, str) {
    args := Array.make(.[
        "build", "-r", "js", "--error-format", "v1",
        "--no-file-contents", "--no-colors", 
        "-o", target, "-DJS_PLATFORM_LAYER_EXTENSIONS",
    ])

    args->concat(source_files)

    compile_process := os.process_spawn(
        "onyx", args,
        starting_directory=working_dir
    )

    compile_reader := io.reader_make(&compile_process)
    compile_output := compile_reader->read_all()

    switch os.process_wait(&compile_process) {
        case .Success do return .{ Ok = .{} }
        case .Error   do return .{ Err = compile_output }
    }
}

Result.or_break :: macro (r: Result($O, $E)) -> O {
    switch v := r; v {
        case .Ok as o do return o
        case .Err do break break
    }
}

#operator ?? macro (_r: Result($O, $E), code: Code) -> O {
    switch __r := _r; __r {
        case .Ok as o do return o
        case .Err as e {
            #unquote code(e)
        }
    }
}

@route.{.POST, "/compile"}
compile_onyx :: (c: Context) {
    vars := c->bind(struct {
        @"json:code"
        code: str
    })

    use wasm_file := temp_file(".wasm")
    use code_file := temp_file(".onyx")

    {
        use code_file_handle := os.open(code_file.path, .Write) ?? [] {
            c->no_content(500)
            return return
        }

        io.stream_write(&code_file_handle, vars.code)
    }
    
    compile_result := run_compile_command(
        target = str.advance(wasm_file.path, "compilation/".count),
        source_files = .[
            str.advance(code_file.path, "compilation/".count),
            "./read_line.onyx",
            "./canvas.onyx",
            "./platform.onyx"
        ],
        working_dir = "compilation/"
    )

    switch compile_result {
        case .Ok {
            c->file(200, "application/wasm", wasm_file.path)
        }

        case .Err as output {
            c->blob(500, "text/plain", output)
        }
    }
}

@route.{.POST, "/compile_v2"}
compile_onyx_project :: (c: Context) {
    body := c->json_raw()?

    temp_directory_name := random.string(32, alpha_numeric=true)
    temp_directory := os.path_join("compilation", temp_directory_name)
    os.dir_create(temp_directory)
    defer os.remove_directory(temp_directory)

    build_project_dir :: (root: encoding.json.Value, current_dir: str) {
        for root->as_map_iter() {
            path := os.path_join(current_dir, it.first)

            switch it.second->type() {
                case .String {
                    use file := os.open(path, .Write)->or_break()
                    io.stream_write(&file, it.second->as_str())
                }

                case .Object {
                    os.dir_create(path)
                    build_project_dir(it.second, path)
                }
            }
        }
    }

    build_project_dir(body["files"], temp_directory)

    use wasm_file := temp_file(".wasm", temp_directory)

    source_files := Iterator.comp(
        body["config"]["source_files"]->as_array_iter(),
        [x](x->as_str())
    )

    source_files << "../read_line.onyx"
    source_files << "../canvas.onyx"
    source_files << "../platform.onyx"

    _, target := os.path_split(wasm_file.path)
    compile_result := run_compile_command(
        target = target,
        source_files = source_files,
        working_dir = temp_directory
    )

    switch compile_result {
        case .Ok {
            c->file(200, "application/wasm", wasm_file.path)
        }

        case .Err as output {
            c->blob(500, "text/plain", output)
        }
    }
}

@route.{.GET, "/manifest.json"}
manifest_json :: (c: Context) {
    Metadata :: struct {
        short_name, name, start_url, background_color, display, scope, theme_color, description: str

        shortcuts, screenshots: [] str
        icons: [] struct {
            src, type, sizes: str
        }
    }

    c->json(200, Metadata.{
        short_name = "Onyx Playground",
        name = "Onyx Playground",
        icons = .[
            .{
                src = tprintf("{}/static/logo_256.png", ENDPOINT),
                type = "image/png",
                sizes = "256x256",
            },
            .{
                src = tprintf("{}/static/logo_512.png", ENDPOINT),
                type = "image/png",
                sizes = "512x512",
            },
        ],

        start_url = tprintf("{}/?source=pwa", ENDPOINT),
        background_color = "#111",
        display = "standalone",
        scope = tprintf("{}/", ENDPOINT),
        theme_color = "#111",
        shortcuts = str.[],
        description = "Onyx Playground",
        screenshots = str.[]
    })
}

// @route.{.GET, "/core_libraries.json"}
// core_libraries_json :: (req: &Request, res: &Response) {
//     Elem :: struct { name, type, state, contents: str elems: [] Elem }

//     build_dir :: (d: str) -> [] Elem {
//         out: [..] Elem

//         for os.list_directory(d) {
//             full_path := os.path_join(d, it->name())
//             if os.is_file(full_path) {
//                 out << .{ tprintf(it->name()), "file", contents = os.get_contents(full_path) }
//             }
//             if os.is_directory(full_path) {
//                 out << .{ tprintf(it->name()), "dir", "closed", elems = build_dir(full_path) }
//             }
//         }

//         return out
//     }

//     output := build_dir(tprintf("{}/core", ONYX_SOURCE_FOLDER))
//     res->json(output)
//     res->status(200)
//     res->end()
// }

@route.{.GET, "/favicon.ico"}
favicon :: (c: Context) {
    c->file(200, "image/x-icon", "www/static/favicon.ico")
}


setup_server :: () -> &Nimbus {
    n := Nimbus.new() |> new()
    n->add(logger(style=.V2))
    n->add(c => {
        c->set_header("Cross-Origin-Embedder-Policy", "require-corp")
        c->set_header("Cross-Origin-Opener-Policy", "same-origin")
        c->set_header("Service-Worker-Allowed", "/")

        c->next()
    })
    n->add(static(aprintf("{}/static", ENDPOINT), "www/static"))

    n->add_tagged_routes()

    return n
}

setup_templates :: () {
    template_registry = otmp.registry()
    template_registry->load_directory("www/templates", "html")
}

main :: () {
    random.set_seed(os.time())
    setup_templates()

    server_port := conv.parse(u32, os.env("SERVER_PORT") ?? "4000") ?? 4000

    n := setup_server()
    n->serve(server_port, .{
        thread_count = 4,
        max_clients = 256
    })
}




TemporaryFilePath :: struct {
    path: str
}
    
temp_file :: (extension: str, prefix := "compilation") -> TemporaryFilePath {
    return .{ tprintf("{}/{}{}", prefix, random.string(16, alpha_numeric=true), extension) }
}

#overload
delete :: (t: &TemporaryFilePath) {
    os.remove_file(t.path)
}

